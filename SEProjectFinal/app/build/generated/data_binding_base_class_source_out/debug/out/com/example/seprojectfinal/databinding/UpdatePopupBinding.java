// Generated by view binder compiler. Do not edit!
package com.example.seprojectfinal.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.seprojectfinal.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UpdatePopupBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnUpdateEmp;

  @NonNull
  public final EditText editTextAddressGlideEmp;

  @NonNull
  public final EditText editTextAgeGlideEmp;

  @NonNull
  public final EditText editTextDestinationGlideEmp;

  @NonNull
  public final EditText editTextEmailGlideEmp;

  @NonNull
  public final EditText editTextGenderGlideEmp;

  @NonNull
  public final EditText editTextNameGlideEmp;

  @NonNull
  public final EditText editTextNumberGlideEmp;

  @NonNull
  public final EditText editTextSymptomsGlideEmp;

  @NonNull
  public final EditText editTextTemperatureGlideEmp;

  private UpdatePopupBinding(@NonNull LinearLayout rootView, @NonNull Button btnUpdateEmp,
      @NonNull EditText editTextAddressGlideEmp, @NonNull EditText editTextAgeGlideEmp,
      @NonNull EditText editTextDestinationGlideEmp, @NonNull EditText editTextEmailGlideEmp,
      @NonNull EditText editTextGenderGlideEmp, @NonNull EditText editTextNameGlideEmp,
      @NonNull EditText editTextNumberGlideEmp, @NonNull EditText editTextSymptomsGlideEmp,
      @NonNull EditText editTextTemperatureGlideEmp) {
    this.rootView = rootView;
    this.btnUpdateEmp = btnUpdateEmp;
    this.editTextAddressGlideEmp = editTextAddressGlideEmp;
    this.editTextAgeGlideEmp = editTextAgeGlideEmp;
    this.editTextDestinationGlideEmp = editTextDestinationGlideEmp;
    this.editTextEmailGlideEmp = editTextEmailGlideEmp;
    this.editTextGenderGlideEmp = editTextGenderGlideEmp;
    this.editTextNameGlideEmp = editTextNameGlideEmp;
    this.editTextNumberGlideEmp = editTextNumberGlideEmp;
    this.editTextSymptomsGlideEmp = editTextSymptomsGlideEmp;
    this.editTextTemperatureGlideEmp = editTextTemperatureGlideEmp;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static UpdatePopupBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UpdatePopupBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.update_popup, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UpdatePopupBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnUpdateEmp;
      Button btnUpdateEmp = ViewBindings.findChildViewById(rootView, id);
      if (btnUpdateEmp == null) {
        break missingId;
      }

      id = R.id.editTextAddressGlideEmp;
      EditText editTextAddressGlideEmp = ViewBindings.findChildViewById(rootView, id);
      if (editTextAddressGlideEmp == null) {
        break missingId;
      }

      id = R.id.editTextAgeGlideEmp;
      EditText editTextAgeGlideEmp = ViewBindings.findChildViewById(rootView, id);
      if (editTextAgeGlideEmp == null) {
        break missingId;
      }

      id = R.id.editTextDestinationGlideEmp;
      EditText editTextDestinationGlideEmp = ViewBindings.findChildViewById(rootView, id);
      if (editTextDestinationGlideEmp == null) {
        break missingId;
      }

      id = R.id.editTextEmailGlideEmp;
      EditText editTextEmailGlideEmp = ViewBindings.findChildViewById(rootView, id);
      if (editTextEmailGlideEmp == null) {
        break missingId;
      }

      id = R.id.editTextGenderGlideEmp;
      EditText editTextGenderGlideEmp = ViewBindings.findChildViewById(rootView, id);
      if (editTextGenderGlideEmp == null) {
        break missingId;
      }

      id = R.id.editTextNameGlideEmp;
      EditText editTextNameGlideEmp = ViewBindings.findChildViewById(rootView, id);
      if (editTextNameGlideEmp == null) {
        break missingId;
      }

      id = R.id.editTextNumberGlideEmp;
      EditText editTextNumberGlideEmp = ViewBindings.findChildViewById(rootView, id);
      if (editTextNumberGlideEmp == null) {
        break missingId;
      }

      id = R.id.editTextSymptomsGlideEmp;
      EditText editTextSymptomsGlideEmp = ViewBindings.findChildViewById(rootView, id);
      if (editTextSymptomsGlideEmp == null) {
        break missingId;
      }

      id = R.id.editTextTemperatureGlideEmp;
      EditText editTextTemperatureGlideEmp = ViewBindings.findChildViewById(rootView, id);
      if (editTextTemperatureGlideEmp == null) {
        break missingId;
      }

      return new UpdatePopupBinding((LinearLayout) rootView, btnUpdateEmp, editTextAddressGlideEmp,
          editTextAgeGlideEmp, editTextDestinationGlideEmp, editTextEmailGlideEmp,
          editTextGenderGlideEmp, editTextNameGlideEmp, editTextNumberGlideEmp,
          editTextSymptomsGlideEmp, editTextTemperatureGlideEmp);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
